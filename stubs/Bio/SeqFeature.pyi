# Generated by ChatGPT o3 based on code of SeqFeature.py
# https://github.com/biopython/biopython/blob/10bb67863892d23cfa611cabf9cd93c1e1e83ef9/Bio/SeqFeature.py

from __future__ import annotations

from typing import Dict, Iterator, List, Optional, Union

from Bio.Seq import MutableSeq, Seq

# --------------------------------------------------------------------------- #
#  Convenience aliases                                                        #
# --------------------------------------------------------------------------- #

Strand = Optional[int]                     # +1, -1, 0, or None
SeqLike = Union[str, Seq, MutableSeq]      # DNA/RNA/protein or plain string


# --------------------------------------------------------------------------- #
#  Position objects (minimal public surface – all behave like `int`)          #
# --------------------------------------------------------------------------- #

class Position(int): ...
class ExactPosition(Position): ...
class BeforePosition(Position): ...
class AfterPosition(Position): ...
class WithinPosition(Position): ...
class BetweenPosition(Position): ...
class OneOfPosition(Position): ...
class UnknownPosition(Position): ...
class UncertainPosition(Position): ...


# --------------------------------------------------------------------------- #
#  Location hierarchy                                                         #
# --------------------------------------------------------------------------- #

class Location:
    start: Position
    end: Position
    strand: Strand

    def extract(
        self,
        parent_sequence: SeqLike,
        references: Optional[Dict[str, Seq]] = ...,
    ) -> SeqLike: ...

    # convenience dunders ---------------------------------------------------- #
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __contains__(self, value: int) -> bool: ...

    # internal helpers (return shifted / flipped copies) --------------------- #
    def _shift(self, offset: int) -> "Location": ...
    def _flip(self, length: int) -> "Location": ...


class SimpleLocation(Location):
    parts: List["SimpleLocation"]

    def __init__(
        self,
        start: Union[int, Position],
        end: Union[int, Position],
        strand: Strand = ...,
        *,
        ref: Optional[str] = ...,
        ref_db: Optional[str] = ...,
    ) -> None: ...


class CompoundLocation(Location):
    parts: List[SimpleLocation]
    operator: str

    def __init__(self, parts: List[SimpleLocation], operator: str = ...) -> None: ...


# Retro-compat alias used throughout Biopython
FeatureLocation = SimpleLocation


# --------------------------------------------------------------------------- #
#  SeqFeature – high-level wrapper around a Location                          #
# --------------------------------------------------------------------------- #

class SeqFeature:
    location: Union[SimpleLocation, CompoundLocation]
    type: str
    id: str
    qualifiers: Dict[str, List[str]]

    def __init__(
        self,
        location: Optional[Union[SimpleLocation, CompoundLocation]] = ...,
        *,
        type: str = ...,
        id: str = ...,
        qualifiers: Optional[Dict[str, List[str]]] = ...,
        sub_features: Optional[List["SeqFeature"]] = ...,
    ) -> None: ...

    # convenience helpers ---------------------------------------------------- #
    def extract(
        self,
        parent_sequence: SeqLike,
        references: Optional[Dict[str, Seq]] = ...,
    ) -> SeqLike: ...

    def translate(
        self,
        parent_sequence: SeqLike,
        table: Union[str, int] = ...,
        *,
        start_offset: Optional[int] = ...,
        stop_symbol: str = ...,
        to_stop: bool = ...,
        cds: Optional[bool] = ...,
        gap: Optional[str] = ...,
    ) -> Seq: ...

    # delegate dunders to underlying location -------------------------------- #
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __contains__(self, value: int) -> bool: ...


# --------------------------------------------------------------------------- #
#  Miscellaneous public helpers                                               #
# --------------------------------------------------------------------------- #

class Reference:
    location: List[Location]
    authors: str
    consrtm: str
    title: str
    journal: str
    medline_id: str
    pubmed_id: str
    comment: str


class LocationParserError(ValueError): ...
